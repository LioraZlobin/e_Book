@model IEnumerable<e_Book.Models.Book>

@{ ViewBag.Title = "Books"; }

<div class="container">
    <div class="row mb-4">
        <!-- שדה חיפוש -->
        <div class="col-md-6">
            <form action="@Url.Action("Search", "Books")" method="get" class="form-inline">
                <input type="text" name="query" placeholder="חפש ספר לפי שם, מחבר או הוצאה לאור..." class="form-control mr-2" />
                <button type="submit" class="btn btn-primary">חפש</button>
            </form>
        </div>
    </div>
</div>

<!-- הודעות שגיאה , הצלחה ומידע -->
@if (TempData["Info"] != null)
{
    <div class="alert alert-info" id="message-box">@TempData["Info"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger" id="message-box">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success" id="message-box">@TempData["Success"]</div>
}

<div class="btn-group mb-4">
    <a href="@Url.Action("FilterDiscountedBooks", "Books")" class="filter-btn">ספרים בהנחה</a>
    <a href="@Url.Action("Sort", "Books", new { sortBy = "price_asc" })" class="filter-btn">מחיר - מהנמוך לגבוה</a>
    <a href="@Url.Action("Sort", "Books", new { sortBy = "price_desc" })" class="filter-btn">מחיר - מהגבוה לנמוך</a>
    <a href="@Url.Action("Sort", "Books", new { sortBy = "year" })" class="filter-btn">שנה - מהחדשה לישנה</a>
    <a href="@Url.Action("Sort", "Books", new { sortBy = "year_asc" })" class="filter-btn">שנה - מהישנה לחדשה</a>
</div>

<div class="books-title-container">
    <h3 class="custom-title">BOOKS</h3>
</div>



<p>
    @Html.ActionLink("הוספת ספר חדש", "Create")
</p>

<div class="container">
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="@item.ImageUrl" class="card-img-top" alt="@item.Title" style="height: 250px; object-fit: cover;" />
                    <div class="card-body">
                        <h5 class="card-title">@item.Title</h5>
                        <p class="card-text">
                            <strong>מחבר:</strong> @item.Author<br />
                            <strong>הוצאה:</strong> @item.Publisher<br />
                            <strong>הגבלת גיל:</strong> @item.AgeRestriction<br />
                            <strong>מחיר קנייה:</strong>
                            @if (item.PreviousPrice.HasValue && item.DiscountEndDate.HasValue && item.DiscountEndDate > DateTime.Now)
                            {
                                <span style="text-decoration: line-through; color: red;">
                                    @item.PreviousPrice.Value.ToString("C")
                                </span>
                                <span style="font-weight: bold; color: green;">
                                    @item.PriceBuy.ToString("C")
                                </span> }
                            else
                            {
                                <span>@item.PriceBuy.ToString("C")</span>}
                            <br />
                            @if (item.IsBorrowable)
                            {
                                <strong>מחיר השאלה:</strong> @item.PriceBorrow.ToString("C")<br />
                                <strong>עותקים זמינים:</strong> @item.AvailableCopies<br />
                            }

                        </p>
                        <div class="d-flex justify-content-between">
                            @Html.ActionLink("Edit", "Edit", new { id = item.BookId }, new { @class = "btn btn-secondary btn-sm" })
                            @Html.ActionLink("Details", "Details", new { id = item.BookId }, new { @class = "btn btn-info btn-sm" })
                            @Html.ActionLink("Delete", "Delete", new { id = item.BookId }, new { @class = "btn btn-danger btn-sm" })
                        </div>
                        <form action="@Url.Action("AddToCart", "CartItems", new { bookId = item.BookId })" method="post" class="mt-2">
                            @Html.AntiForgeryToken()

                            @{
                                // המרת המחרוזת של הגבלת הגיל למספר שלם
                                int requiredAge = 0; // ברירת מחדל אם אין הגבלת גיל
                                if (!string.IsNullOrEmpty(item.AgeRestriction) && item.AgeRestriction != "All Ages")
                                {
                                    int.TryParse(item.AgeRestriction.Replace("+", ""), out requiredAge);
                                }

                                // בדיקה אם המשתמש לא עומד בהגבלת הגיל
                                bool isAgeRestricted = requiredAge > 0 && ViewBag.UserAge < requiredAge;
                            }

                            @if (isAgeRestricted)
                            {
                                <!-- כפתור חסום במקרה שהמשתמש לא עומד בהגבלת הגיל -->
                                <button type="button" class="btn btn-secondary btn-sm w-100" disabled>
                                    אינך עומד בהגבלת הגיל
                                </button>
                            }
                            else
                            {
                                <!-- ספרים שלא ניתנים להשאלה -->
                                if (!item.IsBorrowable)
                                {
                                    <div class="mb-2">
                                        <label>בחר סוג עסקה:</label>
                                        <select name="transactionType" class="form-control" style="width: 60%;" required>
                                            <option value="buy">קנייה</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-sm w-100">
                                        הוסף לעגלת הקניות
                                    </button>
                                }
                                else
                                {
                                    <!-- ספרים שניתנים להשאלה וגם לרכישה -->
                                    <div class="mb-2">
                                        <label>בחר סוג עסקה:</label>
                                        <select name="transactionType" class="form-control" style="width: 60%;" required>
                                            <option value="buy">קנייה</option>
                                            <option value="borrow">השאלה</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-sm w-100">
                                        הוסף לעגלת הקניות
                                    </button>
                                }
                            }
                        </form>



                    </div>

                </div>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const messageBox = document.getElementById("message-box");
        if (messageBox) {
            setTimeout(() => {
                messageBox.style.display = "none";
            }, 3000); // הסתרה לאחר 3 שניות
        }
    });

    function addToCart(bookId) {
        fetch('/CartItems/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ bookId: bookId }),
        })
            .then(response => response.json())
            .then(data => {
                // יצירת הודעה
                const alertDiv = document.createElement('div');
                alertDiv.className = data.success ? 'alert alert-success' : 'alert alert-danger';
                alertDiv.innerText = data.message;
                document.body.prepend(alertDiv);

                // הסרת ההודעה אחרי 3 שניות
                setTimeout(() => alertDiv.remove(), 3000);
            })
            .catch(error => {
                console.error('Error:', error);
                alert('שגיאה בתקשורת עם השרת.');
            });
    }
</script>
